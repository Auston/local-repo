#!/usr/bin/env python3.2

from argparse import ArgumentParser

from localrepo.package import Package
from localrepo.repo import Repo
from localrepo.aur import Aur
from localrepo.msg import Msg

class LocalRepo:
	''' The main class for the local-repo programm '''

	def __init__(self, path):
		''' The constructor needs the path to the repo database file '''
		Msg.process('Loading repo database:', path)
		self.repo = Repo(path)

	def list_packages(self):
		''' Print all repo packages '''
		if self.repo.size is 0:
			Msg.info('This repo has no packages')
			return

		for name in sorted(self.repo.packages):
			Msg.info(self.repo.packages[name].name, self.repo.packages[name].version)

	def package_info(self, name):
		''' Print all available info of apackage '''
		if not self.repo.has_package(name):
			Msg.error('Package does not exist:', name)
			return False

		for i in self.repo.package(name).infos:
			Msg.info('{0:10} {1}'.format(i, self.repo.package(name).infos[i]))

		return True

	def find_packages(self, q):
		''' Search the repo for packages '''
		res = self.repo.find_packages(q)

		if not res:
			Msg.info('No package found')
			return

		for r in res:
			Msg.info(r, self.repo.package(r).version)

	def add_package(self, path, upgrade=False):
		''' Add a package to the repo '''
		try:
			Msg.process('Making a new package')
			pkg = Package.forge(path)

			if upgrade:
				Msg.process('Upgrading package:', pkg.name)
				self.repo.upgrade(pkg)
			else:
				Msg.process('Adding package to the repo:', pkg.name)
				self.repo.add(pkg)
		except Exception as e:
			Msg.error(str(e))
			return False

		return False

	def remove_package(self, name):
		''' Remove a package from the repo '''
		if not self.repo.has_package(name):
			Msg.error('Package does not exist:', name)

		Msg.process('Removing package:', name)

		try:
			self.repo.remove(name)
		except Exception as e:
			Msg.error(str(e))
			return False

		return True

	def add_package_from_aur(self, name):
		''' Download, make and add a package from the AUR '''
		Msg.process('Retrieving package infos from the AUR')

		try:
			pkg = Aur.package(name)
		except Exception as e:
			Msg.error(str(e))
			return False

		if self.repo.has_package(pkg['name']):
			Msg.error('Package is already in the repo:', pkg['name'])
			return False

		return self.add_package(pkg['uri'])

	def upgrade_aur_packages(self):
		''' Upgrades all packages from the AUR '''
		Msg.process('Retrieving package infos from the AUR')

		try:
			pkgs = Aur.packages(self.repo.packages)
		except Exception as e:
			Msg.error(str(e))
			return False

		Msg.process('Checking for updates')
		updates = []

		for name in pkgs:
			if not self.repo.has_package(name):
				continue

			if pkgs[name]['version'] > self.repo.package(name).version:
				updates.append(pkgs[name])

		if not updates:
			Msg.info('All packages are up to date')
			return True

		for pkg in updates:
			Msg.result('{0} ({1} -> {2})'.format(pkg['name'], self.repo.package(pkg['name']).version,
			                                     pkg['version']))

		if not Msg.yes('Upgrade'):
			Msg.info('Bye')

		for pkg in updates:
			if not self.add_package(pkg['uri'], True):
				return False

		return True

	def check(self):
		''' Run an integrity check '''
		Msg.process('Running integrity check')
		errors = self.repo.check()

		if not errors:
			Msg.info('No errors found')

		for e in errors:
			Msg.error(e)

	def shutdown(self):
		''' Clean up '''

		Package.clean()

if __name__ == '__main__':
	p = ArgumentParser(description='This programm helps to manage local repositories. Specify\
	                   the path to the repository database with the last argument and choose at\
					   least one operation from the options list.', usage='%(prog)s [options] path')
	p.add_argument('path', type=str, metavar='path', help='path to the repo database')
	p.add_argument('-c', '--check', action='store_true', dest='check', default=False,
	               help='run an integrity check')
	p.add_argument('-l', '--list', action='store_true', dest='list', default=False,
	               help='list all packages from the repo')
	p.add_argument('-i', '--info', action='store', dest='info', type=str, metavar='name',
	               help='display infos for the specified package')
	p.add_argument('-s', '--search', action='store', dest='search', type=str, metavar='term',
	               help='find packages by term')
	p.add_argument('-a', '--add', action='store', dest='add', type=str, metavar='path',
	               help='add a package to the repo. path can point to a package file, a pkgbuild\
	               tarball or can be the uri of a downloadable pkgbuild tarball, e.g. in the AUR')
	p.add_argument('-u', '--upgrade', action='store', dest='upgrade', type=str, metavar='path',
	               help='upgrade a package by replacing it with a new package. see --add for a\
				   description of the path argument')
	p.add_argument('-r', '--remove', action='store', dest='remove', type=str, metavar='name',
	               help='remove the package specified by name from the repo')
	p.add_argument('-A', '--aur-add', action='store', dest='aur_add', type=str, metavar='name',
	               help='download, build and add a package specified by name from the AUR to the\
	               repo')
	p.add_argument('-U', '--aur-upgrade', action='store_true', dest='aur_upgrade', default=False,
	               help='upgrade all packages in the repo, which are available in the AUR')

	args = p.parse_args()

	try:
		r = LocalRepo(args.path)
	except Exception as e:
		Msg.error(str(e))
		exit(1)

	error = False

	if args.check:
		r.check()
	elif args.list:
		r.list_packages()
	elif args.info is not None:
		if not r.package_info(args.info):
			error = True
	elif args.search is not None:
		r.find_packages(args.search)
	elif args.add is not None:
		if not r.add_package(args.add):
			error = True
	elif args.upgrade is not None:
		if not r.add_package(args.upgrade, True):
			error =True
	elif args.remove is not None:
		if not r.remove_package(args.remove):
			error = True
	elif args.aur_add is not None:
		if not r.add_package_from_aur(args.aur_add):
			error = True
	elif args.aur_upgrade:
		if not r.upgrade_aur_packages():
			error = True

	r.shutdown()

	if error:
		exit(1)
	exit(0)
