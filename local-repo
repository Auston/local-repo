#!/usr/bin/env python3.2

import sys
from argparse import ArgumentParser

from localrepo.localrepo import LocalRepo

# Handle KeyboardInterrupt
excepthook = sys.excepthook

def lr_excepthook(type, value, traceback):
	if not type is KeyboardInterrupt:
		excepthook(type, value, traceback)
	else:
		LocalRepo.abort()

sys.excepthook = lr_excepthook

# Configure ArgumentParser
p = ArgumentParser(description='This programm helps to manage local repositories. Specify\
                   the path to the repository database with the first argument. If no option is\
                   specified, some repo informations will be printed.',
                   usage='%(prog)s path [options]')

p.add_argument('path', type=str, metavar='path', help='path to the repo database')

p.add_argument('-a', '--add', action='store', dest='add', type=str, metavar='path', nargs='+',
               help='add a package to the repo. path can point to a package file, a pkgbuild\
               tarball or can be the uri of a downloadable pkgbuild tarball, e.g. in the AUR')

p.add_argument('-A', '--aur-add', action='store', dest='aur_add', type=str, metavar='name',
               nargs='+', help='download, build and add a package specified by name from the\
               AUR to the repo')

p.add_argument('-c', '--check', action='store_true', dest='check', default=False,
               help='run an integrity check')

p.add_argument('-e', '--elephant', action='store_true', dest='elephant', default=False,
               help='the elephant never forgets')

p.add_argument('-i', '--info', action='store', dest='info', type=str, metavar='name',
               nargs='+', help='display infos for the specified package')

p.add_argument('-l', '--list', action='store_true', dest='list', default=False,
               help='list all packages from the repo')

p.add_argument('-r', '--remove', action='store', dest='remove', type=str, metavar='name',
               nargs='+', help='remove the packages specified by name from the repo')

p.add_argument('-R', '--restore', action='store_true', dest='restore', default=False,
               help='Restore repo database')

p.add_argument('-s', '--search', action='store', dest='find', type=str, metavar='term',
               help='find packages by term')

p.add_argument('-u', '--upgrade', action='store', dest='upgrade', type=str, metavar='path',
               nargs='+', help='upgrade a package by replacing it with a new package. see\
               --add for a description of the path argument')

p.add_argument('-U', '--aur-upgrade', action='store_true', dest='aur_upgrade', default=False,
               help='upgrade all packages in the repo, which are available in the AUR')

args = p.parse_args()

# Load the repo
r = LocalRepo(args.path)
del(args.path)

# Print repo size if no option is specified
args.size = True if not any([var[1] for var in vars(args).items()]) else False

# Run commands
for method, arg in (opt for opt in vars(args).items() if opt[1]):
	if type(arg) is bool:
		if not getattr(r, method)():
			LocalRepo.shutdown(True)
	else:
		if not getattr(r, method)(arg):
			LocalRepo.shutdown(True)

# Shutdown
LocalRepo.shutdown(False)
